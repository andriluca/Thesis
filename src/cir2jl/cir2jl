#       _     ____   _ _
#   ___(_)_ _|___ \ (_) |
#  / __| | '__|__) || | |
# | (__| | |  / __/ | | |
#  \___|_|_| |_____|/ |_|
#                 |__/

#!/bin/sh

input=$1
convdir="$HOME/Thesis/src/input/"

# Se la cartella dove avviene la conversione non esiste, la creo.
[[ ! -d $convdir ]] && mkdir $convdir

# Controllo inserimento del file di input.
if [ $# -le 1 ]; then
    echo "Usage: $0 <name_of_airway_tree.cir> <Airway_start>"
    exit 1
fi

# Parsing delle connessioni
tail -n +2 $input > "$convdir/Albero_tagliato.cir"

echo "connect(in, $2.in)" > "$convdir/Connections.jl"
echo "$2.i1.trigger.u ~ true" >> "$convdir/Connections.jl"

while IFS= read -r line;
do
    node_name=$(echo $line | awk '{print $1}')
    output_node=$(echo $line | awk '{print $6}')
    pattern=$(echo "$output_node N")
    inputs=$(grep "$pattern" "$convdir/Albero_tagliato.cir" | cut -d ' ' -f1)
    connect_inputs=$(for i in $inputs; do echo "$i.in"; done | tr '\n' ',' | sed "s/,$//")
    timings=$(for i in $inputs; do echo "$i.i1.trigger.u"; done)

    [[ ! -z $connect_inputs ]] && echo "connect($node_name.out, $connect_inputs)" >> "$convdir/Connections.jl"

    for i in $timings;
    do
        [[ ! -z $i ]] && echo "$i ~ $node_name.i1.trigger.y" >> "$convdir/Connections.jl";
    done

done < "$convdir/Albero_tagliato.cir"

# Parsing dei moduli
echo "in = Pin()" > "$convdir/Albero.jl"
tr -d '\r' < $input     \
| sed 's/(.*)/ = /g;
    s/zwall[_a-z]* /Airway(\n/g;
    s/alveolo[_a-z]* /Alveolus(\n/g;
    s/[[:space:]][A-Za-z]*= 0//g;
    s/[[:space:]]La=/\n\tLa       =/g;
    s/[[:space:]]Lb=/,\n\tLb       =/g;
    s/[[:space:]]Ra=/,\n\tRa       =/g;
    s/[[:space:]]Rb=/,\n\tRb       =/g;
    s/[[:space:]]Rws=/,\n\tR_sw     =/g;
    s/[[:space:]]Lws=/,\n\tI_sw     =/g;
    s/[[:space:]]Cws=/,\n\tC_sw     =/g;
    s/[[:space:]]Chargeth=/,\n\tV_FRC    =/g;
    s/[[:space:]]Ccap=/,\n\tC_g      =/g;
    s/[[:space:]]Vin_th=/,\n\t# Vin_th   =/g;
    s/[[:space:]]Lti=/,\n\tI_t      =/g;
    s/[[:space:]]Rti=/,\n\tR_t      =/g;
    s/[[:space:]]Cti=/,\n\tC_t      =/g;
    s/[[:space:]]Rs=/,\n\tR_s      =/g;
    s/[[:space:]]Cs=/,\n\tC_s      =/g;
    /Vin_th/a)'         \
| tail -n +2 >> "$convdir/Albero.jl"

# Creazione del Modello di Sistema
echo -e "@mtkmodel Lungs begin\n@components begin\n" > "$convdir/System_prova.jl"
cat "$convdir/Albero.jl"          >> "$convdir/System_prova.jl"
echo -e "end\n@equations begin\n" >> "$convdir/System_prova.jl"
cat "$convdir/Connections.jl"     >> "$convdir/System_prova.jl"
echo -e "end\nend\n"              >> "$convdir/System_prova.jl"

rm "$convdir/Albero_tagliato.cir" "$convdir/Connections.jl" "$convdir/Albero.jl"
