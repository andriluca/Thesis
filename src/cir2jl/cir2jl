#       _     ____   _ _
#   ___(_)_ _|___ \ (_) |
#  / __| | '__|__) || | |
# | (__| | |  / __/ | | |
#  \___|_|_| |_____|/ |_|
#                 |__/

#!/bin/sh

input=$1
convdir="$HOME/Thesis/src/input/"

# Se la cartella dove avviene la conversione non esiste, la creo.
[[ ! -d $convdir ]] && mkdir $convdir

# Controllo inserimento del file di input.
if [ $# -le 1 ]; then
    echo "Usage: $0 <name_of_airway_tree.cir> <Airway_start>"
    exit 1
fi

# Parsing delle connessioni
tail -n +2 $input > "$convdir/Albero_tagliato.cir"

echo "connect(in, $2.in)" > "$convdir/Connections.jl"
echo "$2.i1.trigger_in ~ trigger_in" >> "$convdir/Connections.jl"

while IFS= read -r line;
do
    node_name=$(echo $line | awk '{print $1}')
    output_node=$(echo $line | awk '{print $6}')
    pattern=$(echo "$output_node N")
    inputs=$(grep "$pattern" "$convdir/Albero_tagliato.cir" | cut -d ' ' -f1)
    connect_inputs=$(for i in $inputs; do echo "$i.in"; done | tr '\n' ',' | sed "s/,$//")
    timings=$(for i in $inputs; do echo "$i.i1.trigger_in"; done)

    [[ ! -z $connect_inputs ]] && echo "connect($node_name.out, $connect_inputs)" >> "$convdir/Connections.jl"

    for i in $timings;
    do
        [[ ! -z $i ]] && echo "$i ~ $node_name.i1.trigger_out" >> "$convdir/Connections.jl";
    done

done < "$convdir/Albero_tagliato.cir"

# Parsing dei moduli
echo "in = Pin()" > "$convdir/Albero.jl"
tr -d '\r' < $input     \
| sed 's/(.*)/ = /g;
    s/zwall[_a-z]* /Airway(\n/g;
    s/alveolo[_a-z]* /Alveolus(\n/g;
    s/[[:space:]][A-Za-z]*= 0//g;
    s/[[:space:]]La=/\n\tLa       =/g;
    s/[[:space:]]Lb=/,\n\tLb       =/g;
    s/[[:space:]]Ra=/,\n\tRa       =/g;
    s/[[:space:]]Rb=/,\n\tRb       =/g;
    s/[[:space:]]Rws=/,\n\tR_sw     =/g;
    s/[[:space:]]Lws=/,\n\tI_sw     =/g;
    s/[[:space:]]Cws=/,\n\tC_sw     =/g;
    s/[[:space:]]Chargeth=/,\n\tV_FRC    =/g;
    s/[[:space:]]Ccap=/,\n\tC_g      =/g;
    s/[[:space:]]Vin_th=/,\n\tvin_th   =/g;
    s/[[:space:]]Lti=/,\n\tI_t      =/g;
    s/[[:space:]]Rti=/,\n\tR_t      =/g;
    s/[[:space:]]Cti=/,\n\tC_t      =/g;
    s/[[:space:]]Rs=/,\n\tR_s      =/g;
    s/[[:space:]]Cs=/,\n\tC_s      =/g;
    /vin_th/a)'         \
| tail -n +2 >> "$convdir/Albero.jl"

# Creazione del Modello di Sistema
echo -e "#= _     _     _\n  | |   / |_  | |   _   _ _ __   __ _ ___\n  | |   | (_) | |  | | | | '_ \ / _\` / __|\n  | |___| |_  | |__| |_| | | | | (_| \__ \\ \n  |_____|_(_) |_____\__,_|_| |_|\__, |___/\n                                |___/\n\n                '                \n               / \ \n              /   \ \n             /  ↑  \ \n            / order \ \n           /         \ \n          /===========\               _\n         /     lvl     \         _.-'\` |________________////  - Polmoni\n        /       1       \         \`'-._|                \\\\\\\\\\\\\\\\ \n       /=================\ \n      /                   \ \n     /          ↓          \ \n    /         order         \ \n   /                         \ \n  /                           \  \n /=============================\ \n\n Questo livello è generato da uno script (\`src/cir2jl\`).  Sconsigliata\nla modifica diretta di questo file se non utilizzando lo script.\nQuesto livello collega i vari sottocircuiti per creare il modello\n(passivo) del polmone.                                         =#\n" > "$convdir/System_prova1.jl"
echo -e "@mtkmodel Lungs begin\n@variables begin\ntrigger_in(t) = false, [description = \"True when start current integrating.\"]\nend\n\n@components begin" >> "$convdir/System_prova1.jl"
cat "$convdir/Albero.jl"          >> "$convdir/System_prova1.jl"
echo -e "end\n\n@equations begin\n" >> "$convdir/System_prova1.jl"
cat "$convdir/Connections.jl"     >> "$convdir/System_prova1.jl"
echo -e "\nend\n\nend\n"              >> "$convdir/System_prova1.jl"

rm "$convdir/Albero_tagliato.cir" "$convdir/Connections.jl" "$convdir/Albero.jl"
